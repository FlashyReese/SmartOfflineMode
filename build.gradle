import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = "${project.archives_base_name}-mc${project.minecraft}"
version = project.mod_version
group = project.maven_group

configurations {
    shadow
    api.extendsFrom shadow
}

repositories {
    maven { url 'https://jitpack.io' }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //Database
    shadow(implementation("com.github.lmdbjava:lmdbjava:${project.lmdb_version}")) {
        exclude group: 'org.ow2.asm' //Fabric Loader already includes this
    }

    // BCrypt
    include(implementation("at.favre.lib:bcrypt:${project.bcrypt_version}"))
    include(implementation("at.favre.lib:bytes:${project.bytes_version}"))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 16
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from("LICENSE.txt") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

shadowJar {
    dependsOn(project(":").jar)
    configurations = [project.configurations.shadow]
    archiveClassifier.set('dev')

    relocate 'org.lmdbjava', 'me.flashyreese.mods.smartofflinemode.shadow.lmdbjava'
}

task shadowRemapJar(type: RemapJarTask) {
    dependsOn shadowJar

    input.set(file("${project.buildDir}/libs/$archivesBaseName-${project.version}-dev.jar"))
    archiveFileName = "${archivesBaseName}-${project.version}.jar"
    addNestedDependencies.set(true)
}
build.dependsOn(shadowRemapJar)

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}