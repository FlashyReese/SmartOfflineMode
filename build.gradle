import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'fabric-loom' version '0.7-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

configurations {
    shadow
    api.extendsFrom shadow
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //Database
    shadow("org.lmdbjava:lmdbjava:${project.lmdb_version}") {
        exclude group: 'org.ow2.asm' //Fabric Loader already includes this
    }

    // BCrypt
    shadow("at.favre.lib:bcrypt:${project.bcrypt_version}")
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE.txt"
}

shadowJar {
    dependsOn(project(":").jar)
    configurations = [project.configurations.shadow]
    archiveClassifier.set('dev')

    relocate 'org.lmdbjava', 'me.flashyreese.mods.smartofflinemode.shadow.lmdbjava'
}

task shadowRemapJar(type: RemapJarTask) {
    dependsOn shadowJar

    input.set(file("${project.buildDir}/libs/$archivesBaseName-${project.version}-dev.jar"))
    archiveFileName = "${archivesBaseName}-${project.version}.jar"
    addNestedDependencies.set(true)
}
build.dependsOn(shadowRemapJar)

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
